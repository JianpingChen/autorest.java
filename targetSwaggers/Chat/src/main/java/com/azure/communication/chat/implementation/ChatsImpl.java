// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.chat.implementation;

import com.azure.communication.chat.models.AddThreadMembersRequest;
import com.azure.communication.chat.models.CreateMessageRequest;
import com.azure.communication.chat.models.CreateMessageResponse;
import com.azure.communication.chat.models.CreateThreadRequest;
import com.azure.communication.chat.models.CreateThreadResponse;
import com.azure.communication.chat.models.GetMessagesResponse;
import com.azure.communication.chat.models.GetThreadsResponse;
import com.azure.communication.chat.models.Message;
import com.azure.communication.chat.models.PostReadReceiptRequest;
import com.azure.communication.chat.models.ReadReceipt;
import com.azure.communication.chat.models.Thread;
import com.azure.communication.chat.models.ThreadMember;
import com.azure.communication.chat.models.UpdateMessageRequest;
import com.azure.communication.chat.models.UpdateThreadRequest;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Chats. */
public final class ChatsImpl {
    /** The proxy service used to perform REST calls. */
    private final ChatsService service;

    /** The service client containing this operation class. */
    private final ChatServiceClientImpl client;

    /**
     * Initializes an instance of ChatsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ChatsImpl(ChatServiceClientImpl client) {
        this.service = RestProxy.create(ChatsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for ChatServiceClientChats to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ChatServiceClientCha")
    private interface ChatsService {
        @Get("/chat/threads/{threadId}/readreceipts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<List<ReadReceipt>>> getReadReceipts(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion);

        @Post("/chat/threads/{threadId}/readreceipts")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendReadReceipt(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json-patch+json") PostReadReceiptRequest body);

        @Post("/chat/threads/{threadId}/messages")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<CreateMessageResponse>> sendMessage(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json-patch+json") CreateMessageRequest body);

        @Get("/chat/threads/{threadId}/messages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<GetMessagesResponse>> getMessages(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @QueryParam("pageSize") Integer pageSize,
                @QueryParam("startTime") Long startTime,
                @QueryParam("syncState") String syncState,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion);

        @Get("/chat/threads/{threadId}/messages/{messageId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Message>> getMessage(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @PathParam("messageId") String messageId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion);

        @Patch("/chat/threads/{threadId}/messages/{messageId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateMessage(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @PathParam("messageId") String messageId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json-patch+json") UpdateMessageRequest body);

        @Delete("/chat/threads/{threadId}/messages/{messageId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteMessage(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @PathParam("messageId") String messageId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion);

        @Post("/chat/threads/{threadId}/typing")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> notifyUserTyping(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion);

        @Get("/chat/threads/{threadId}/members")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<List<ThreadMember>>> getThreadMembers(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion);

        @Post("/chat/threads/{threadId}/members")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addThreadMembers(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json-patch+json") AddThreadMembersRequest body);

        @Delete("/chat/threads/{threadId}/members/{memberId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeThreadMember(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @PathParam("memberId") String memberId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion);

        @Post("/chat/threads")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<CreateThreadResponse>> createThread(
                @HostParam("$host") String host,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json-patch+json") CreateThreadRequest body);

        @Get("/chat/threads")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<GetThreadsResponse>> getThreads(
                @HostParam("$host") String host,
                @QueryParam("pageSize") Integer pageSize,
                @QueryParam("startTime") Long startTime,
                @QueryParam("syncState") String syncState,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion);

        @Patch("/chat/threads/{threadId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateThread(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json-patch+json") UpdateThreadRequest body);

        @Get("/chat/threads/{threadId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Thread>> getThread(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion);

        @Delete("/chat/threads/{threadId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteThread(
                @HostParam("$host") String host,
                @PathParam("threadId") String threadId,
                @HeaderParam("x-skypetoken") String xSkypetoken,
                @HeaderParam("MS-CV") String mSCV,
                @QueryParam("api-version") String apiVersion);
    }

    /**
     * Gets read receipts for a thread.
     *
     * @param threadId Thread id to get the read receipts for.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return read receipts for a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<ReadReceipt>>> getReadReceiptsWithResponseAsync(
            String threadId, String xSkypetoken, String mSCV) {
        return service.getReadReceipts(this.client.getHost(), threadId, xSkypetoken, mSCV, this.client.getApiVersion());
    }

    /**
     * Gets read receipts for a thread.
     *
     * @param threadId Thread id to get the read receipts for.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return read receipts for a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<ReadReceipt>> getReadReceiptsAsync(String threadId, String xSkypetoken, String mSCV) {
        return getReadReceiptsWithResponseAsync(threadId, xSkypetoken, mSCV)
                .flatMap(
                        (Response<List<ReadReceipt>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets read receipts for a thread.
     *
     * @param threadId Thread id to get the read receipts for.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return read receipts for a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<ReadReceipt> getReadReceipts(String threadId, String xSkypetoken, String mSCV) {
        return getReadReceiptsAsync(threadId, xSkypetoken, mSCV).block();
    }

    /**
     * Posts a Read Receipt Event to a thread, on behalf of a user.
     *
     * @param threadId Id of the thread.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Request payload for sending a read receipt.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendReadReceiptWithResponseAsync(
            String threadId, String xSkypetoken, String mSCV, PostReadReceiptRequest body) {
        return service.sendReadReceipt(
                this.client.getHost(), threadId, xSkypetoken, mSCV, this.client.getApiVersion(), body);
    }

    /**
     * Posts a Read Receipt Event to a thread, on behalf of a user.
     *
     * @param threadId Id of the thread.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Request payload for sending a read receipt.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendReadReceiptAsync(
            String threadId, String xSkypetoken, String mSCV, PostReadReceiptRequest body) {
        return sendReadReceiptWithResponseAsync(threadId, xSkypetoken, mSCV, body)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Posts a Read Receipt Event to a thread, on behalf of a user.
     *
     * @param threadId Id of the thread.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Request payload for sending a read receipt.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendReadReceipt(String threadId, String xSkypetoken, String mSCV, PostReadReceiptRequest body) {
        sendReadReceiptAsync(threadId, xSkypetoken, mSCV, body).block();
    }

    /**
     * Sends a message to a thread identified by {threadId}.
     *
     * @param threadId The thread id to send the message to.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Details of the message to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CreateMessageResponse>> sendMessageWithResponseAsync(
            String threadId, String xSkypetoken, String mSCV, CreateMessageRequest body) {
        return service.sendMessage(
                this.client.getHost(), threadId, xSkypetoken, mSCV, this.client.getApiVersion(), body);
    }

    /**
     * Sends a message to a thread identified by {threadId}.
     *
     * @param threadId The thread id to send the message to.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Details of the message to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateMessageResponse> sendMessageAsync(
            String threadId, String xSkypetoken, String mSCV, CreateMessageRequest body) {
        return sendMessageWithResponseAsync(threadId, xSkypetoken, mSCV, body)
                .flatMap(
                        (Response<CreateMessageResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Sends a message to a thread identified by {threadId}.
     *
     * @param threadId The thread id to send the message to.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Details of the message to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateMessageResponse sendMessage(
            String threadId, String xSkypetoken, String mSCV, CreateMessageRequest body) {
        return sendMessageAsync(threadId, xSkypetoken, mSCV, body).block();
    }

    /**
     * Gets a list of message from a thread identified by {threadId}.
     *
     * @param threadId The thread id of the message.
     * @param xSkypetoken Skype token header.
     * @param pageSize The number of messages being requested.
     * @param startTime The start time where the range query. This is represented by number of seconds since epoch time.
     * @param syncState The continuation token that previous request obtained. This is used for paging.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of message from a thread identified by {threadId}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GetMessagesResponse>> getMessagesWithResponseAsync(
            String threadId, String xSkypetoken, Integer pageSize, Long startTime, String syncState, String mSCV) {
        return service.getMessages(
                this.client.getHost(),
                threadId,
                pageSize,
                startTime,
                syncState,
                xSkypetoken,
                mSCV,
                this.client.getApiVersion());
    }

    /**
     * Gets a list of message from a thread identified by {threadId}.
     *
     * @param threadId The thread id of the message.
     * @param xSkypetoken Skype token header.
     * @param pageSize The number of messages being requested.
     * @param startTime The start time where the range query. This is represented by number of seconds since epoch time.
     * @param syncState The continuation token that previous request obtained. This is used for paging.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of message from a thread identified by {threadId}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetMessagesResponse> getMessagesAsync(
            String threadId, String xSkypetoken, Integer pageSize, Long startTime, String syncState, String mSCV) {
        return getMessagesWithResponseAsync(threadId, xSkypetoken, pageSize, startTime, syncState, mSCV)
                .flatMap(
                        (Response<GetMessagesResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets a list of message from a thread identified by {threadId}.
     *
     * @param threadId The thread id of the message.
     * @param xSkypetoken Skype token header.
     * @param pageSize The number of messages being requested.
     * @param startTime The start time where the range query. This is represented by number of seconds since epoch time.
     * @param syncState The continuation token that previous request obtained. This is used for paging.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of message from a thread identified by {threadId}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetMessagesResponse getMessages(
            String threadId, String xSkypetoken, Integer pageSize, Long startTime, String syncState, String mSCV) {
        return getMessagesAsync(threadId, xSkypetoken, pageSize, startTime, syncState, mSCV).block();
    }

    /**
     * Gets a message identified by {messageId}.
     *
     * @param threadId The thread id of the message.
     * @param messageId The message id of the message.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message identified by {messageId}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Message>> getMessageWithResponseAsync(
            String threadId, String messageId, String xSkypetoken, String mSCV) {
        return service.getMessage(
                this.client.getHost(), threadId, messageId, xSkypetoken, mSCV, this.client.getApiVersion());
    }

    /**
     * Gets a message identified by {messageId}.
     *
     * @param threadId The thread id of the message.
     * @param messageId The message id of the message.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message identified by {messageId}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Message> getMessageAsync(String threadId, String messageId, String xSkypetoken, String mSCV) {
        return getMessageWithResponseAsync(threadId, messageId, xSkypetoken, mSCV)
                .flatMap(
                        (Response<Message> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets a message identified by {messageId}.
     *
     * @param threadId The thread id of the message.
     * @param messageId The message id of the message.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a message identified by {messageId}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Message getMessage(String threadId, String messageId, String xSkypetoken, String mSCV) {
        return getMessageAsync(threadId, messageId, xSkypetoken, mSCV).block();
    }

    /**
     * Updates a message identified by {threadId} and {messageId}.
     *
     * @param threadId The thread id of the message.
     * @param messageId The message id of the message.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Details of the request to update the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateMessageWithResponseAsync(
            String threadId, String messageId, String xSkypetoken, String mSCV, UpdateMessageRequest body) {
        return service.updateMessage(
                this.client.getHost(), threadId, messageId, xSkypetoken, mSCV, this.client.getApiVersion(), body);
    }

    /**
     * Updates a message identified by {threadId} and {messageId}.
     *
     * @param threadId The thread id of the message.
     * @param messageId The message id of the message.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Details of the request to update the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateMessageAsync(
            String threadId, String messageId, String xSkypetoken, String mSCV, UpdateMessageRequest body) {
        return updateMessageWithResponseAsync(threadId, messageId, xSkypetoken, mSCV, body)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Updates a message identified by {threadId} and {messageId}.
     *
     * @param threadId The thread id of the message.
     * @param messageId The message id of the message.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Details of the request to update the message.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateMessage(
            String threadId, String messageId, String xSkypetoken, String mSCV, UpdateMessageRequest body) {
        updateMessageAsync(threadId, messageId, xSkypetoken, mSCV, body).block();
    }

    /**
     * Deletes a message identified by {threadId} and {messageId}.
     *
     * @param threadId The thread id of the message.
     * @param messageId The message id of the message.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteMessageWithResponseAsync(
            String threadId, String messageId, String xSkypetoken, String mSCV) {
        return service.deleteMessage(
                this.client.getHost(), threadId, messageId, xSkypetoken, mSCV, this.client.getApiVersion());
    }

    /**
     * Deletes a message identified by {threadId} and {messageId}.
     *
     * @param threadId The thread id of the message.
     * @param messageId The message id of the message.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteMessageAsync(String threadId, String messageId, String xSkypetoken, String mSCV) {
        return deleteMessageWithResponseAsync(threadId, messageId, xSkypetoken, mSCV)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a message identified by {threadId} and {messageId}.
     *
     * @param threadId The thread id of the message.
     * @param messageId The message id of the message.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMessage(String threadId, String messageId, String xSkypetoken, String mSCV) {
        deleteMessageAsync(threadId, messageId, xSkypetoken, mSCV).block();
    }

    /**
     * Posts a Typing Event to a thread, on behalf of a user.
     *
     * @param threadId Id of the thread.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> notifyUserTypingWithResponseAsync(String threadId, String xSkypetoken, String mSCV) {
        return service.notifyUserTyping(
                this.client.getHost(), threadId, xSkypetoken, mSCV, this.client.getApiVersion());
    }

    /**
     * Posts a Typing Event to a thread, on behalf of a user.
     *
     * @param threadId Id of the thread.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> notifyUserTypingAsync(String threadId, String xSkypetoken, String mSCV) {
        return notifyUserTypingWithResponseAsync(threadId, xSkypetoken, mSCV)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Posts a Typing Event to a thread, on behalf of a user.
     *
     * @param threadId Id of the thread.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void notifyUserTyping(String threadId, String xSkypetoken, String mSCV) {
        notifyUserTypingAsync(threadId, xSkypetoken, mSCV).block();
    }

    /**
     * Gets the members of a thread.
     *
     * @param threadId Thread id to get members for.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the members of a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<ThreadMember>>> getThreadMembersWithResponseAsync(
            String threadId, String xSkypetoken, String mSCV) {
        return service.getThreadMembers(
                this.client.getHost(), threadId, xSkypetoken, mSCV, this.client.getApiVersion());
    }

    /**
     * Gets the members of a thread.
     *
     * @param threadId Thread id to get members for.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the members of a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<ThreadMember>> getThreadMembersAsync(String threadId, String xSkypetoken, String mSCV) {
        return getThreadMembersWithResponseAsync(threadId, xSkypetoken, mSCV)
                .flatMap(
                        (Response<List<ThreadMember>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets the members of a thread.
     *
     * @param threadId Thread id to get members for.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the members of a thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<ThreadMember> getThreadMembers(String threadId, String xSkypetoken, String mSCV) {
        return getThreadMembersAsync(threadId, xSkypetoken, mSCV).block();
    }

    /**
     * Adds thread members to a thread. If members already exist, no change occurs.
     *
     * @param threadId Id of the thread to add members to.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Thread members to be added to the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addThreadMembersWithResponseAsync(
            String threadId, String xSkypetoken, String mSCV, AddThreadMembersRequest body) {
        return service.addThreadMembers(
                this.client.getHost(), threadId, xSkypetoken, mSCV, this.client.getApiVersion(), body);
    }

    /**
     * Adds thread members to a thread. If members already exist, no change occurs.
     *
     * @param threadId Id of the thread to add members to.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Thread members to be added to the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addThreadMembersAsync(
            String threadId, String xSkypetoken, String mSCV, AddThreadMembersRequest body) {
        return addThreadMembersWithResponseAsync(threadId, xSkypetoken, mSCV, body)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Adds thread members to a thread. If members already exist, no change occurs.
     *
     * @param threadId Id of the thread to add members to.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Thread members to be added to the thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addThreadMembers(String threadId, String xSkypetoken, String mSCV, AddThreadMembersRequest body) {
        addThreadMembersAsync(threadId, xSkypetoken, mSCV, body).block();
    }

    /**
     * Remove a member from a thread.
     *
     * @param threadId Thread id to remove members from.
     * @param memberId Id of the thread member to remove from the thread.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeThreadMemberWithResponseAsync(
            String threadId, String memberId, String xSkypetoken, String mSCV) {
        return service.removeThreadMember(
                this.client.getHost(), threadId, memberId, xSkypetoken, mSCV, this.client.getApiVersion());
    }

    /**
     * Remove a member from a thread.
     *
     * @param threadId Thread id to remove members from.
     * @param memberId Id of the thread member to remove from the thread.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeThreadMemberAsync(String threadId, String memberId, String xSkypetoken, String mSCV) {
        return removeThreadMemberWithResponseAsync(threadId, memberId, xSkypetoken, mSCV)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a member from a thread.
     *
     * @param threadId Thread id to remove members from.
     * @param memberId Id of the thread member to remove from the thread.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeThreadMember(String threadId, String memberId, String xSkypetoken, String mSCV) {
        removeThreadMemberAsync(threadId, memberId, xSkypetoken, mSCV).block();
    }

    /**
     * Creates a chat thread.
     *
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Request payload for creating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CreateThreadResponse>> createThreadWithResponseAsync(
            String xSkypetoken, String mSCV, CreateThreadRequest body) {
        return service.createThread(this.client.getHost(), xSkypetoken, mSCV, this.client.getApiVersion(), body);
    }

    /**
     * Creates a chat thread.
     *
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Request payload for creating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateThreadResponse> createThreadAsync(String xSkypetoken, String mSCV, CreateThreadRequest body) {
        return createThreadWithResponseAsync(xSkypetoken, mSCV, body)
                .flatMap(
                        (Response<CreateThreadResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Creates a chat thread.
     *
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Request payload for creating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateThreadResponse createThread(String xSkypetoken, String mSCV, CreateThreadRequest body) {
        return createThreadAsync(xSkypetoken, mSCV, body).block();
    }

    /**
     * Gets a list of threads for a user identified by {userId}.
     *
     * @param xSkypetoken Skype token header.
     * @param pageSize The number of threads being requested.
     * @param startTime The start time where the range query. This is represented by number of seconds since epoch time.
     * @param syncState The continuation token that previous request obtained. This is used for paging.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of threads for a user identified by {userId}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<GetThreadsResponse>> getThreadsWithResponseAsync(
            String xSkypetoken, Integer pageSize, Long startTime, String syncState, String mSCV) {
        return service.getThreads(
                this.client.getHost(), pageSize, startTime, syncState, xSkypetoken, mSCV, this.client.getApiVersion());
    }

    /**
     * Gets a list of threads for a user identified by {userId}.
     *
     * @param xSkypetoken Skype token header.
     * @param pageSize The number of threads being requested.
     * @param startTime The start time where the range query. This is represented by number of seconds since epoch time.
     * @param syncState The continuation token that previous request obtained. This is used for paging.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of threads for a user identified by {userId}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<GetThreadsResponse> getThreadsAsync(
            String xSkypetoken, Integer pageSize, Long startTime, String syncState, String mSCV) {
        return getThreadsWithResponseAsync(xSkypetoken, pageSize, startTime, syncState, mSCV)
                .flatMap(
                        (Response<GetThreadsResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets a list of threads for a user identified by {userId}.
     *
     * @param xSkypetoken Skype token header.
     * @param pageSize The number of threads being requested.
     * @param startTime The start time where the range query. This is represented by number of seconds since epoch time.
     * @param syncState The continuation token that previous request obtained. This is used for paging.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of threads for a user identified by {userId}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetThreadsResponse getThreads(
            String xSkypetoken, Integer pageSize, Long startTime, String syncState, String mSCV) {
        return getThreadsAsync(xSkypetoken, pageSize, startTime, syncState, mSCV).block();
    }

    /**
     * Updates a thread's properties.
     *
     * @param threadId The id of the thread to edit.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Request payload for updating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateThreadWithResponseAsync(
            String threadId, String xSkypetoken, String mSCV, UpdateThreadRequest body) {
        return service.updateThread(
                this.client.getHost(), threadId, xSkypetoken, mSCV, this.client.getApiVersion(), body);
    }

    /**
     * Updates a thread's properties.
     *
     * @param threadId The id of the thread to edit.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Request payload for updating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateThreadAsync(String threadId, String xSkypetoken, String mSCV, UpdateThreadRequest body) {
        return updateThreadWithResponseAsync(threadId, xSkypetoken, mSCV, body)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Updates a thread's properties.
     *
     * @param threadId The id of the thread to edit.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @param body Request payload for updating a chat thread.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateThread(String threadId, String xSkypetoken, String mSCV, UpdateThreadRequest body) {
        updateThreadAsync(threadId, xSkypetoken, mSCV, body).block();
    }

    /**
     * Gets a chat thread.
     *
     * @param threadId Thread id to get.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a chat thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Thread>> getThreadWithResponseAsync(String threadId, String xSkypetoken, String mSCV) {
        return service.getThread(this.client.getHost(), threadId, xSkypetoken, mSCV, this.client.getApiVersion());
    }

    /**
     * Gets a chat thread.
     *
     * @param threadId Thread id to get.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a chat thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Thread> getThreadAsync(String threadId, String xSkypetoken, String mSCV) {
        return getThreadWithResponseAsync(threadId, xSkypetoken, mSCV)
                .flatMap(
                        (Response<Thread> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets a chat thread.
     *
     * @param threadId Thread id to get.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a chat thread.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Thread getThread(String threadId, String xSkypetoken, String mSCV) {
        return getThreadAsync(threadId, xSkypetoken, mSCV).block();
    }

    /**
     * Deletes a thread.
     *
     * @param threadId Thread id to delete.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteThreadWithResponseAsync(String threadId, String xSkypetoken, String mSCV) {
        return service.deleteThread(this.client.getHost(), threadId, xSkypetoken, mSCV, this.client.getApiVersion());
    }

    /**
     * Deletes a thread.
     *
     * @param threadId Thread id to delete.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteThreadAsync(String threadId, String xSkypetoken, String mSCV) {
        return deleteThreadWithResponseAsync(threadId, xSkypetoken, mSCV).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a thread.
     *
     * @param threadId Thread id to delete.
     * @param xSkypetoken Skype token header.
     * @param mSCV [Correlation Vector](https://osgwiki.com/wiki/CorrelationVector). If a value is not provided a
     *     randomly generated correlation vector would be returned in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteThread(String threadId, String xSkypetoken, String mSCV) {
        deleteThreadAsync(threadId, xSkypetoken, mSCV).block();
    }
}
